kindle-highlights
============

*Get your Kindle highlights via Amazon's Kindle site*

There's currently no Kindle API, so I built a scraper.

**Required gems**

* Mechanize

**Install**
	
	gem install kindle-highlights
**Usage - object operation**

	require 'kindle-highlights'

	# to create a new KindleHighlight object, give it your Amazon email address and password	
	kindle = KindleHighlight.new("foo@bar.com", "password")
	
	kindle.highlights.each do |highlight|
		highlight.annotation_id # => a unique value for each highlight, generated by Amazon
		highlight.content # => the actual highlight text
		highlight.asin # => the Amazon ASIN for the highlight's product
		highlight.author # => author of the book from which the highlight is taken
		highlight.title # => title of the book from which the highlight is taken
	end

**Usage - xml/html outputs**

	require 'kindle-highlights'

	# to create a new KindleHighlight object, give it your Amazon email address and password
	kindle = KindleHighlight.new("foo@bar.com", "password", { :page_limit => 100, :wait_time => 2 }) do | h |
		puts "loading... [#{h.books.last.title}]"
	end

	# xml outputs (needs to create ./xml folder in advance)
	KindleHighlight::XML.new(:list => kindle.list, :output_path => "./xml", :file_name => "out.xml").output

	# html outputs (needs to create ./html folder in advance)
	KindleHighlight::HTML.new(:list => kindle.list, :output_path => "./html", :file_name => "out.html").output

**Usage - differential save/load**

	require 'kindle-highlights'

	# to create a new KindleHighlight object, give it your Amazon email address and password
	kindle = KindleHighlight.new("foo@bar.com", "password", { :page_limit => 100, :wait_time => 2 }) do | h |
		puts "loading... [#{h.books.last.title}]"
	end

	# load previous file, merge with the new one, and dump it again.
	if File.exist?("out.dump")
		list = Marshal.load(File.open("out.dump"))
		kindle.merge!(list)
	end

	KindleHighlight::HTML.new(:list => kindle.list, :file_name => "out.html").output

	File.open("out.dump", "w") do | f |
		Marshal.dump(kindle.list, f)
	end


#### options
- page_limit : specifies maximum number of pages (books) to be loaded
- wait_time : specifies wait time between each page load in seconds (default is 5 seconds)
- block : call-back function which for each page load completion

**Output - xml**

XML output example

	<?xml version="1.0"?>
	<books>
		<book>
			<asin>ASIN</asin>
			<title>TITLE</title>
			<author>AUTHOR</author>
			<highlights>
				<annotation_id>ANNOTATION_ID1</annotation_id>
				<content>CONTENT1</content>
			</highlights>
			<highlights>
				<annotation_id>ANNOTATION_ID2</annotation_id>
				<content>CONTENT2</content>
			</highlights>
		</book>
	</books>

**Output - html**

http://cloud.github.com/downloads/parroty/kindle-highlights/kindle_highlight_html.png

**Updates**

* Added annotation_id to Highlight class (0.0.3)
* Added dependencies to Mechanize and ruby-aaws within gemspec (0.0.4)
* Cache AWS Product API results in a Hash, keyed on ASIN, to save time (0.0.5)
* Get Small response group from Amazon (0.0.5)
* Removed ruby-aaws and used the scraping instead (0.0.6)
* Added multiple pager load and xml output (0.0.6)
* Added load/save and replace feature for differential updates (0.0.6)
* Added html output (0.0.6)

**TODO**

* Exception handling
* Documentation
* Tests